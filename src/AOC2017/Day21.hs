{-# LANGUAGE RankNTypes #-}

module AOC2017.Day21 (day21a, day21b) where

import           AOC2017.Types         (Challenge)
import           AOC2017.Util          ((!!!), strip)
import           Control.Lens          (over, Traversal')
import           Data.Bool
import           Data.List             (transpose)
import           Data.List.Split       (chunksOf, splitOn)
import qualified Data.Map              as M
import qualified Numeric.LinearAlgebra as H

type Grid = H.Matrix H.I

type Rule = M.Map Grid Grid

-- | All 8 symmetries (elements of D8)
--
-- Generated by r, r^2, r^3, r^4, and flip times all of those
--
-- Thanks to https://en.wikipedia.org/wiki/Dihedral_group_of_order_8
symmetries :: Grid -> [Grid]
symmetries g = do
    r <- take 4 (iterate rot90 g)   -- from the four rotations
    [r, mirror r]                   -- ... include the rotation plus its flip
  where
    -- rotate 90 degrees
    rot90 = H.tr . H.flipud
    -- flip about diagonal
    mirror = H.tr

parse :: String -> Rule
parse = M.unions . map (M.fromList . parseLine) . lines
  where
    parseLine :: String -> [(Grid, Grid)]
    parseLine (map(splitOn "/".strip).splitOn"=>"->[xs,ys]) =
          [ (g, gridOut) | g <- symmetries gridIn ]
      where
        el '#' = 1
        el _   = 0
        gridIn  = H.fromLists . (map . map) el $ xs
        gridOut = H.fromLists . (map . map) el $ ys
    parseLine _ = error "No parse"

-- | A traversal over subgrids of a grid
subgrids :: Int -> Traversal' Grid Grid
subgrids n f = fmap H.fromBlocks
             . (traverse . traverse) f
             . H.toBlocksEvery n n

step :: Rule -> Grid -> Grid
step r g = over (subgrids n) (r M.!) g
  where
    n | H.cols g `mod` 2 == 0 = 2
      | H.cols g `mod` 3 == 0 = 3
      | otherwise             = error "hello there"

day21 :: Int -> Rule -> Int
day21 n r = fromIntegral . H.sumElements
          $ iterate (step r) grid0 !!! n
  where
    grid0 = H.fromLists [[0,1,0],[0,0,1],[1,1,1]]

day21a :: Challenge
day21a = show . day21 5 . parse

day21b :: Challenge
day21b = show . day21 18 . parse
